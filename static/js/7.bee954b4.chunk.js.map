{"version":3,"sources":["services/api.jsx","views/MoviesPage.jsx"],"names":["axios","defaults","baseURL","API_KEY","fetchImages","url","a","get","results","console","log","fetchTrendingMovies","findFilms","name","findFilmById","movieId","findActors","findReview","MoviesPage","useState","setName","films","setFilms","location","useLocation","history","useHistory","useRouteMatch","onSubmit","e","res","data","preventDefault","findFilm","type","autoComplete","autoFocus","placeholder","value","onChange","target","map","film","to","pathname","id","state","from","label","original_title"],"mappings":"iWACAA,IAAMC,SAASC,QAAU,+BACzB,IAAMC,EAAU,mCAEVC,EAAW,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACIN,IAAMO,IAAIF,GADd,cACZG,EADY,OAElBC,QAAQC,IAAI,WAAYF,GAFN,kBAGXA,GAHW,2CAAH,sDAMV,SAASG,IACd,OAAOP,EAAY,+BAAD,OAAgCD,IAG7C,SAASS,EAAUC,GACxB,OAAOT,EAAY,yBAAD,OACSD,EADT,wCACgDU,IAI7D,SAASC,EAAaC,GAC3B,OAAOX,EAAY,UAAD,OAAWW,EAAX,oBAA8BZ,EAA9B,oBAGb,SAASa,EAAWD,GACzB,OAAOX,EAAY,UAAD,OACNW,EADM,4BACqBZ,EADrB,oBAKb,SAASc,EAAWF,GACzB,OAAOX,EAAY,UAAD,OACNW,EADM,4BACqBZ,EADrB,6B,wJC3BL,SAASe,IACtB,MAAwBC,mBAAS,IAAjC,mBAAON,EAAP,KAAaO,EAAb,KACA,EAA0BD,mBAAS,IAAnC,mBAAOE,EAAP,KAAcC,EAAd,KAEMC,EAAWC,cACXC,EAAUC,cAChBjB,QAAQC,IAAI,iBAAkBa,GAC9Bd,QAAQC,IAAI,iBAAkBe,GAE9B,IAAQpB,EAAQsB,cAARtB,IACRI,QAAQC,IAAI,MAAOL,GAgBnB,OACE,qCACE,uBAAMuB,SAZe,SAACC,GAAM,4CAE9B,4BAAAvB,EAAA,+EAEsBM,YAAUC,GAFhC,OAEUiB,EAFV,OAGIR,EAASQ,EAAIC,KAAKvB,SAHtB,wGAF8B,sBAC9BqB,EAAEG,iBAD4B,mCAQ9BC,IAIE,UACE,uBACEC,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,eACZC,MAAOzB,EACP0B,SAvBa,SAACV,GACpBT,EAAQS,EAAEW,OAAOF,UAwBb,wBAAQJ,KAAK,SAAb,+CAGF,6BACGb,EAAMoB,KAAI,SAACC,GAAD,OACT,mCACI,IACF,cAAC,IAAD,CACEC,GAAI,CACFC,SAAS,GAAD,OAAKvC,EAAL,YAAYqC,EAAKG,IACzBC,MAAO,CACLC,KAAM,CACJxB,WACAyB,MAAO,oCANf,SAWGN,EAAKO,mBAbDP,EAAKG","file":"static/js/7.bee954b4.chunk.js","sourcesContent":["import axios from \"axios\";\r\naxios.defaults.baseURL = \"https://api.themoviedb.org/3\";\r\nconst API_KEY = \"aeea02db324303291298da0524ee2653\";\r\n\r\nconst fetchImages = async (url) => {\r\n  const results = await axios.get(url);\r\n  console.log(\"response\", results);\r\n  return results;\r\n};\r\n\r\nexport function fetchTrendingMovies() {\r\n  return fetchImages(`/trending/movie/day?api_key=${API_KEY}`);\r\n}\r\n\r\nexport function findFilms(name) {\r\n  return fetchImages(\r\n    `/search/movie?api_key=${API_KEY}&language=en-US&page=1&query=${name}`\r\n  );\r\n}\r\n\r\nexport function findFilmById(movieId) {\r\n  return fetchImages(`/movie/${movieId}?api_key=${API_KEY}&language=en-US`);\r\n}\r\n\r\nexport function findActors(movieId) {\r\n  return fetchImages(\r\n    `/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\r\n  );\r\n}\r\n\r\nexport function findReview(movieId) {\r\n  return fetchImages(\r\n    `/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\r\n  );\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { findFilms } from \"../services/api\";\r\nimport { Link, useRouteMatch, useHistory, useLocation } from \"react-router-dom\";\r\n\r\nexport default function MoviesPage() {\r\n  const [name, setName] = useState(\"\");\r\n  const [films, setFilms] = useState([]);\r\n\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  console.log(\"useLocatoin222\", location);\r\n  console.log(\"useHistory2222\", history);\r\n\r\n  const { url } = useRouteMatch();\r\n  console.log(\"url\", url);\r\n\r\n  const handleChange = (e) => {\r\n    setName(e.target.value);\r\n  };\r\n\r\n  const handleSubmitForm = (e) => {\r\n    e.preventDefault();\r\n    async function findFilm() {\r\n      try {\r\n        const res = await findFilms(name);\r\n        setFilms(res.data.results);\r\n      } catch (e) {}\r\n    }\r\n    findFilm();\r\n  };\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmitForm}>\r\n        <input\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          autoFocus\r\n          placeholder=\"Search films\"\r\n          value={name}\r\n          onChange={handleChange}\r\n        />\r\n        <button type=\"submit\">Поиск</button>\r\n      </form>\r\n\r\n      <ul>\r\n        {films.map((film) => (\r\n          <li key={film.id}>\r\n            /{\" \"}\r\n            <Link\r\n              to={{\r\n                pathname: `${url}/${film.id}`,\r\n                state: {\r\n                  from: {\r\n                    location,\r\n                    label: \"назад\",\r\n                  },\r\n                },\r\n              }}\r\n            >\r\n              {film.original_title}\r\n            </Link>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n"],"sourceRoot":""}