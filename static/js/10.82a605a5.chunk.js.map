{"version":3,"sources":["views/Review.jsx"],"names":["Review","movieId","useState","review","setReview","useEffect","a","findReview","res","data","results","fetchFilms","length","map","rev","author","content","id"],"mappings":"oPAGe,SAASA,EAAT,GAA8B,IAAZC,EAAW,EAAXA,QAC/B,EAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KAYA,OAVAC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,+EAEsBC,YAAWN,GAFjC,OAEUO,EAFV,OAGIJ,EAAUI,EAAIC,KAAKC,SAHvB,wGADc,uBAAC,WAAD,wBAOdC,KACC,CAACV,IAGF,mCACqB,IAAlBE,EAAOS,OACN,wDAEA,6BACGT,EAAOU,KAAI,SAACC,GAAD,OACV,+BACE,yCAAYA,EAAIC,UAChB,4BAAID,EAAIE,YAFDF,EAAIG","file":"static/js/10.82a605a5.chunk.js","sourcesContent":["import { findReview } from \"../services/api\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nexport default function Review({ movieId }) {\r\n  const [review, setReview] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchFilms() {\r\n      try {\r\n        const res = await findReview(movieId);\r\n        setReview(res.data.results);\r\n      } catch (e) {}\r\n    }\r\n    fetchFilms();\r\n  }, [movieId]);\r\n\r\n  return (\r\n    <>\r\n      {review.length === 0 ? (\r\n        <p>We dont find any review</p>\r\n      ) : (\r\n        <ul>\r\n          {review.map((rev) => (\r\n            <li key={rev.id}>\r\n              <h4>Author:{rev.author}</h4>\r\n              <p>{rev.content}</p>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"],"sourceRoot":""}